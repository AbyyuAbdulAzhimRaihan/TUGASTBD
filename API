from flask import Flask, request, jsonify
from psycopg2 import sql
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime

app = Flask(__name__)

# Database connection
def get_db_connection():
    conn = psycopg2.connect(
        host="localhost",
        database="TUGASTBD",
        user="postgres",
        password="abyyunada"
    )
    return conn

# SQL Builder
def build_sql_query(table, columns, conditions=None):
    base_query = sql.SQL("SELECT {fields} FROM {table}").format(
        fields=sql.SQL(', ').join([sql.Identifier(col) for col in columns]),
        table=sql.Identifier(table)
    )
    if conditions:
        condition_statements = [sql.SQL("{} = %s").format(sql.Identifier(k)) for k in conditions.keys()]
        query = base_query + sql.SQL(" WHERE ") + sql.SQL(" AND ").join(condition_statements)
        return query, list(conditions.values())
    return base_query, []

# DML: UPDATE query
@app.route('/update', methods=['POST'])
def update_record():
    data = request.json
    table = data['table']
    set_columns = data['set']
    conditions = data['conditions']

    set_statements = [sql.SQL("{} = %s").format(sql.Identifier(k)) for k in set_columns.keys()]
    condition_statements = [sql.SQL("{} = %s").format(sql.Identifier(k)) for k in conditions.keys()]

    query = sql.SQL("UPDATE {table} SET {sets} WHERE {conds}").format(
        table=sql.Identifier(table),
        sets=sql.SQL(', ').join(set_statements),
        conds=sql.SQL(' AND ').join(condition_statements)
    )
    values = list(set_columns.values()) + list(conditions.values())

    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(query, values)
    conn.commit()
    cursor.close()
    conn.close()

    return jsonify({"message": "Record updated"}), 200

# TCL: Combine several SQL statements
@app.route('/transaction', methods=['POST'])
def transaction():
    data = request.json
    queries = data['queries']

    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        for query in queries:
            cursor.execute(query['sql'], query.get('params', []))
        conn.commit()
        return jsonify({"message": "Transaction successful"}), 200
    except Exception as e:
        conn.rollback()
        return jsonify({"message": "Transaction failed", "error": str(e)}), 400
    finally:
        cursor.close()
        conn.close()

# Endpoint to get data using SQL builder
@app.route('/select', methods=['POST'])
def select_data():
    data = request.json
    table = data['table']
    columns = data['columns']
    conditions = data.get('conditions', None)

    query, params = build_sql_query(table, columns, conditions)
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)
    cursor.execute(query, params)
    results = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify(results)

# User Routes
@app.route('/users', methods=['GET', 'POST'])
def manage_users():
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)

    if request.method == 'POST':
        data = request.json
        cursor.execute(
            "INSERT INTO \"USER\" (username, password, email, role_id) VALUES (%s, %s, %s, %s) RETURNING id",
            (data['username'], data['password'], data['email'], data['role_id'])
        )
        conn.commit()
        new_id = cursor.fetchone()['id']
        cursor.close()
        conn.close()
        return jsonify({"message": "User created", "user_id": new_id}), 201

    cursor.execute("SELECT * FROM \"USER\"")
    users = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify(users)

# Book Routes
@app.route('/books', methods=['GET', 'POST'])
def manage_books():
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)

    if request.method == 'POST':
        data = request.json
        cursor.execute(
            "INSERT INTO BOOK (book_number, book_name, publication_year, pages, category_id) VALUES (%s, %s, %s, %s, %s) RETURNING id",
            (data['book_number'], data['book_name'], data['publication_year'], data['pages'], data['category_id'])
        )
        conn.commit()
        new_id = cursor.fetchone()['id']
        cursor.close()
        conn.close()
        return jsonify({"message": "Book added", "book_id": new_id}), 201

    cursor.execute("SELECT * FROM BOOK")
    books = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify(books)

# Wishlist Routes
@app.route('/wishlists', methods=['GET', 'POST'])
def manage_wishlists():
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)

    if request.method == 'POST':
        data = request.json
        cursor.execute(
            "INSERT INTO WISHLIST (user_id, book_id, date_added) VALUES (%s, %s, %s) RETURNING id",
            (data['user_id'], data['book_id'], datetime.utcnow())
        )
        conn.commit()
        new_id = cursor.fetchone()['id']
        cursor.close()
        conn.close()
        return jsonify({"message": "Book added to wishlist", "wishlist_id": new_id}), 201

    cursor.execute("SELECT * FROM WISHLIST")
    wishlists = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify(wishlists)

# Rating Routes
@app.route('/ratings', methods=['GET', 'POST'])
def manage_ratings():
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=RealDictCursor)

    if request.method == 'POST':
        data = request.json
        cursor.execute(
            "INSERT INTO RATING (user_id, book_id, rating, review, rating_date) VALUES (%s, %s, %s, %s, %s) RETURNING id",
            (data['user_id'], data['book_id'], data['rating'], data['review'], datetime.utcnow())
        )
        conn.commit()
        new_id = cursor.fetchone()['id']
        cursor.close()
        conn.close()
        return jsonify({"message": "Rating added", "rating_id": new_id}), 201

    cursor.execute("SELECT * FROM RATING")
    ratings = cursor.fetchall()
    cursor.close()
    conn.close()
    return jsonify(ratings)

if __name__ == '__main__':
    app.run(debug=True)
